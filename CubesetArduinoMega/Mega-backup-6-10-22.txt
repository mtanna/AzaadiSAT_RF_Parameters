#include <Wire.h>
// code tcs34725 start - color sensor
#include "DEV_Config.h"
#include "TCS34725.h"
RGB rgb, RGB888;
UWORD   RGB565 = 0;
// code TCS34725 end
//code BMP280 start - pressure - temprature - altitude sensor
#include <SPI.h>
#include <Adafruit_BMP280.h>

#define BMP_SCK  (13)
#define BMP_MISO (12)
#define BMP_MOSI (11)
#define BMP_CS   (10)
Adafruit_BMP280 bmp;
//code BMP280 end
// Code for DHT22 start - temprature & humidity sensor
#include "DHT.h"
#define DHTPIN 7
#define DHTTYPE DHT22
DHT dht(DHTPIN, DHTTYPE);
// Code for DHT22 end
// Code for ML8511 start
int UVOUT = A0; //Output from the sensor
int REF_3V3 = A1; //3.3V power on the Arduino board

int UV_INDEX_PIN = A2;
// Code for ML8511 end
//code for GPS GY-NEO6MV2 start
#include <TinyGPSPlus.h>
#include <SoftwareSerial.h>

static const int RXPin = 11, TXPin = 10;
static const uint32_t GPSBaud = 9600;

// The TinyGPSPlus object
TinyGPSPlus gps;

// The serial connection to the GPS device
SoftwareSerial gpsSoftwareSerial(TXPin, RXPin );
//code for GPS GY-NEO6MV2 end

//code for ESP32-CAM start

//VOUT - 8
//VNR - 9
#include "string.h"
SoftwareSerial esp32Serial(8, 9);
const int esp32CamCaptureInterval = 4600;
unsigned long esp32LastCamCapturedTime = 0;
const int esp32DataSendInterval = 10400;
unsigned long esp32LastDataSentTime = 0;
unsigned int esp32MessageId = 1;
unsigned int esp32PictureId = 1;
//code for ESP32-CAM end

//code for LoRa start
#include <SPI.h>              // include libraries
#include <LoRa.h>

const int loRaCSPin = 53;          // LoRa radio chip select
const int loRaResetPin = 4;       // LoRa radio reset
const int loRaIrqPin = 3;         // change for your board; must be a hardware interrupt pin

//String outgoing;              // outgoing message

unsigned long loRaLastSendMessageId = 1;           // count of outgoing messages
unsigned long loRalastSendTime = 0;        // last send time
unsigned int loRaSendInterval = 10000;          // interval between sends
//code for LoRa end

//code for SIM800L start
#include "SIM800L.h"

//SIM800l RX -> 18
//SIM800l TX -> 19
#define SIM800_RST_PIN 12

SIM800L* sim800l;
String sim800lSMSPhoneNo = "9601763605";
String sim800l_SEND_SMS = "SIM800L_SEND_SMS";
//code for sIM800L end
//for battery percent code start

int batteryVoltagePin = A4;
//for battery percent end

//for MPU9250 code start
#include <MPU6500_WE.h>
#include <Wire.h>
#define MPU6500_ADDR 0x68
MPU6500_WE myMPU6500 = MPU6500_WE(MPU6500_ADDR);
//for MPU9250 code end




unsigned long mainLastLoopTime = 0;        // last send time
unsigned int mainLoopInterval = 4000;

String ml8511UvRadiation = "",
       dht22Temperature = "",
       dht22Humidity = "",
       dht22HeatIndex = "",
       tcs34725Color = "",
       bmp280Temperature = "",
       bmp280Pressure = "",
       bmp280Altitude = "",
       gyneo6MV2Latitude = "",
       gyneo6MV2Longitude = "",
       gyneo6MV2Altitude = "",
       hw837UvIndex = "",
       batteryLevel = "",
       mpu9250AccelerationX = "",
       mpu9250AccelerationY = "",
       mpu9250AccelerationZ = "",
       mpu9250GX = "",
       mpu9250GY = "",
       mpu9250GZ = "",
       mpu9250ResultantG = "",
       mpu9250GyroX = "",
       mpu9250GyroY = "",
       mpu9250GyroZ = "",
       mpu9250Temp = "";
void setup() {
  Serial.begin(115200);
  //pinMode(14, OUTPUT); //define a digital pin as output
  //digitalWrite(14, HIGH);// set the above pin as HIGH so it acts as 5V
  //pinMode(15, OUTPUT); //define a digital pin as output
  //digitalWrite(15, HIGH);// set the above pin as HIGH so it acts as 5V
  //pinMode(19, OUTPUT); //define a digital pin as output
  //digitalWrite(19, HIGH);// set the above pin as HIGH so it acts as 5V
  Serial.println("Main setup start ----");
  Wire.begin();
  setupML8511();
  setupLoRa();
  setupDHT22();
  setupTCS34725();
  setupBMP280();
  setupHW837();
  setupGYNEO6MV2();
  setupMPU9250();
  setupSIM800L();
  setupESP32();
  setupBatteryVoltageReading();
  delay(2500);
  Serial.println("Main setup complete -----");
}
void loop() {
  if (Serial.available()) {
    String cmd = Serial.readString();
    Serial.print("Cmd received : ");
    Serial.println(cmd);
    if (cmd.startsWith(sim800l_SEND_SMS)) {
      prepareSim800LSMS();
    } else {
      Serial.println("Sending command to SIM800L");
      Serial1.println(cmd);
    }
  }
  if (Serial1.available())
  {
    Serial.println(Serial1.readString());
  }

  int mainCMillis = millis();
  int mainDiff = mainCMillis - mainLastLoopTime ;
  loopESP32CAM();
  loopLoRa();
  loopGYNEO6MV2();
  if (mainDiff > mainLoopInterval) {
    Serial.println("$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$");
    loopML8511();
    loopDHT22();
    loopBMP280();
    loopTCS34725();
    loopHW837();
    loopMPU9250();
    calculateBatteryLevel();
    mainLastLoopTime = mainCMillis;
    Serial.println("$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$");
  }

}
void setupBatteryVoltageReading() {
  pinMode(batteryVoltagePin, INPUT);
  Serial.println("Battery voltage reading setup complete.");
}
void setupMPU9250() {

  //Serial.println("MPU9250 setup start.");

  myMPU6500.init();

  /* The slope of the curve of acceleration vs measured values fits quite well to the theoretical
     values, e.g. 16384 units/g in the +/- 2g range. But the starting point, if you position the
     MPU6500 flat, is not necessarily 0g/0g/1g for x/y/z. The autoOffset function measures offset
     values. It assumes your MPU6500 is positioned flat with its x,y-plane. The more you deviate
     from this, the less accurate will be your results.
     The function also measures the offset of the gyroscope data. The gyroscope offset does not
     depend on the positioning.
     This function needs to be called at the beginning since it can overwrite your settings!
  */
  Serial.println("Position you MPU6500 flat and don't move it - calibrating...");
  delay(2500);
  myMPU6500.autoOffsets();

  /*  This is a more accurate method for calibration. You have to determine the minimum and maximum
      raw acceleration values of the axes determined in the range +/- 2 g.
      You call the function as follows: setAccOffsets(xMin,xMax,yMin,yMax,zMin,zMax);
      Use either autoOffset or setAccOffsets, not both.
  */
  //myMPU6500.setAccOffsets(-14240.0, 18220.0, -17280.0, 15590.0, -20930.0, 12080.0);

  /*  The gyroscope data is not zero, even if you don't move the MPU6500.
      To start at zero, you can apply offset values. These are the gyroscope raw values you obtain
      using the +/- 250 degrees/s range.
      Use either autoOffset or setGyrOffsets, not both.
  */
  //myMPU6500.setGyrOffsets(45.0, 145.0, -105.0);

  /*  You can enable or disable the digital low pass filter (DLPF). If you disable the DLPF, you
      need to select the bandwdith, which can be either 8800 or 3600 Hz. 8800 Hz has a shorter delay,
      but higher noise level. If DLPF is disabled, the output rate is 32 kHz.
      MPU6500_BW_WO_DLPF_3600
      MPU6500_BW_WO_DLPF_8800
  */
  myMPU6500.enableGyrDLPF();
  //myMPU6500.disableGyrDLPF(MPU6500_BW_WO_DLPF_8800); // bandwdith without DLPF

  /*  Digital Low Pass Filter for the gyroscope must be enabled to choose the level.
      MPU6500_DPLF_0, MPU6500_DPLF_2, ...... MPU6500_DPLF_7

      DLPF    Bandwidth [Hz]   Delay [ms]   Output Rate [kHz]
        0         250            0.97             8
        1         184            2.9              1
        2          92            3.9              1
        3          41            5.9              1
        4          20            9.9              1
        5          10           17.85             1
        6           5           33.48             1
        7        3600            0.17             8

        You achieve lowest noise using level 6
  */
  myMPU6500.setGyrDLPF(MPU6500_DLPF_6);

  /*  Sample rate divider divides the output rate of the gyroscope and accelerometer.
      Sample rate = Internal sample rate / (1 + divider)
      It can only be applied if the corresponding DLPF is enabled and 0<DLPF<7!
      Divider is a number 0...255
  */
  myMPU6500.setSampleRateDivider(5);

  /*  MPU6500_GYRO_RANGE_250       250 degrees per second (default)
      MPU6500_GYRO_RANGE_500       500 degrees per second
      MPU6500_GYRO_RANGE_1000     1000 degrees per second
      MPU6500_GYRO_RANGE_2000     2000 degrees per second
  */
  myMPU6500.setGyrRange(MPU6500_GYRO_RANGE_250);

  /*  MPU6500_ACC_RANGE_2G      2 g   (default)
      MPU6500_ACC_RANGE_4G      4 g
      MPU6500_ACC_RANGE_8G      8 g
      MPU6500_ACC_RANGE_16G    16 g
  */
  myMPU6500.setAccRange(MPU6500_ACC_RANGE_2G);

  /*  Enable/disable the digital low pass filter for the accelerometer
      If disabled the bandwidth is 1.13 kHz, delay is 0.75 ms, output rate is 4 kHz
  */
  myMPU6500.enableAccDLPF(true);

  /*  Digital low pass filter (DLPF) for the accelerometer, if enabled
      MPU6500_DPLF_0, MPU6500_DPLF_2, ...... MPU6500_DPLF_7
       DLPF     Bandwidth [Hz]      Delay [ms]    Output rate [kHz]
         0           460               1.94           1
         1           184               5.80           1
         2            92               7.80           1
         3            41              11.80           1
         4            20              19.80           1
         5            10              35.70           1
         6             5              66.96           1
         7           460               1.94           1
  */
  myMPU6500.setAccDLPF(MPU6500_DLPF_6);

  /* You can enable or disable the axes for gyroscope and/or accelerometer measurements.
     By default all axes are enabled. Parameters are:
     MPU6500_ENABLE_XYZ  //all axes are enabled (default)
     MPU6500_ENABLE_XY0  // X, Y enabled, Z disabled
     MPU6500_ENABLE_X0Z
     MPU6500_ENABLE_X00
     MPU6500_ENABLE_0YZ
     MPU6500_ENABLE_0Y0
     MPU6500_ENABLE_00Z
     MPU6500_ENABLE_000  // all axes disabled
  */
  //myMPU6500.enableAccAxes(MPU6500_ENABLE_XYZ);
  //myMPU6500.enableGyrAxes(MPU6500_ENABLE_XYZ);
  delay(200);
  Serial.println("MPU9250 setup complete.");
}
void calculateBatteryLevel() {

  int a0Value = averageAnalogRead(batteryVoltagePin, 64);
  float voltage = (a0Value * 5.0 / 1023) / 0.2;
  Serial.print("Battery voltage : ");
  Serial.println(voltage);
  batteryLevel = String(voltage);//+"-voltage-"+String(voltage);
  /*float perc = mapfloat(voltage, 3.1, 3.7, 0, 100);
    if (perc >= 100.0)
    { perc = 100.0;
    }
    if (perc <= 0.0)
    {
    perc = 0.0;
    }
    batteryLevel = String(perc);//+"-voltage-"+String(voltage);
    Serial.print("Battery = ");
    Serial.println(batteryLevel);*/

  /* sensorValue = analogRead(analogInPin);
    voltage = (((sensorValue * 3.3) / 1024) * 2 + calibration); //multiply by two as voltage divider network is 100K & 100K Resistor

    bat_percentage = mapfloat(voltage, 2.8, 4.2, 0, 100); //2.8V as Battery Cut off Voltage & 4.2V as Maximum Voltage

    if (bat_percentage >= 100)
    {
     bat_percentage = 100;
    }
    if (bat_percentage <= 0)
    {
     bat_percentage = 1;
    }
    Serial.print("Analog Value = ");
    Serial.print(sensorValue);
    Serial.print("\t Output Voltage = ");
    Serial.print(voltage);
    Serial.print("\t Battery Percentage = ");
    Serial.println(bat_percentage);
    batteryLevel = String(bat_percentage);*/
}
void setupLoRa() {
  //Serial.println("LoRa setup start.");
  LoRa.setPins(loRaCSPin, loRaResetPin, loRaIrqPin);// set CS, reset, IRQ pin
  if (!LoRa.begin(433E6)) {             // initialize ratio at 915 MHz
    Serial.println("LoRa init failed. Check your connections.");
    while (true);                       // if failed, do nothing
  }
  LoRa.setSyncWord(0xF1);
  LoRa.setTxPower(10);
  Serial.println("LoRa setup complete.");
}
void setupBMP280() {
  //Serial.println("BMP280 setup start.");
  unsigned status;
  //status = bmp.begin(BMP280_ADDRESS_ALT, BMP280_CHIPID);
  status = bmp.begin();
  if (!status) {
    Serial.println(F("Could not find a valid BMP280 sensor, check wiring or "
                     "try a different address!"));
    Serial.print("SensorID was: 0x"); Serial.println(bmp.sensorID(), 16);
    Serial.print("        ID of 0xFF probably means a bad address, a BMP 180 or BMP 085\n");
    Serial.print("   ID of 0x56 - 0x58 represents a BMP 280, \n");
    Serial.print("        ID of 0x60 represents a BME 280.\n");
    Serial.print("        ID of 0x61 represents a BME 680.\n");
    //while (1) delay(10);
  }

  /* Default settings from datasheet. */
  bmp.setSampling(Adafruit_BMP280::MODE_NORMAL,     /* Operating Mode. */
                  Adafruit_BMP280::SAMPLING_X2,     /* Temp. oversampling */
                  Adafruit_BMP280::SAMPLING_X16,    /* Pressure oversampling */
                  Adafruit_BMP280::FILTER_X16,      /* Filtering. */
                  Adafruit_BMP280::STANDBY_MS_500); /* Standby time. */
  Serial.println("BMP280 setup complete.");
}
void setupTCS34725() {
  //Serial.println("TCS34725 setup start.");
  Config_Init();
  if (TCS34725_Init() != 0) {
    Serial.print("TCS34725 initialization error!!\r\n");
    return;
  }
  //digitalWrite(PWM_PIN, HIGH);
  Serial.println("TCS34725 setup complete.");
}
void setupDHT22() {
  //Serial.println("DHT22 setup start.");
  dht.begin();
  Serial.println("DHT22 setup complete.");
}
void setupHW837() {
  pinMode(UV_INDEX_PIN, INPUT);
  Serial.println("HW837 setup complete.");
}
void setupGYNEO6MV2() {
  //Serial.println("GPS setup start.");
  gpsSoftwareSerial.begin(GPSBaud);
  Serial.println("GPS setup complete.");
}
void setupESP32() {
  //Serial.println("ESP32 setup start.");
  esp32Serial.begin(9600);
  Serial.println("ESP32 setup complete.");
}
void loopDHT22() {
  float h = dht.readHumidity();
  float t = dht.readTemperature();
  //float f = dht.readTemperature(true);

  if (isnan(h) || isnan(t) ) {
    Serial.println(F("Failed to read from DHT sensor!"));
    return;
  }
  //float hif = dht.computeHeatIndex(f, h);
  float hic = dht.computeHeatIndex(t, h, false);

  Serial.print(F("Humidity: "));
  Serial.print(h);
  Serial.print(F(" %  Temperature: "));
  Serial.print(t);
  Serial.print(F("°C "));
  Serial.print(F("  Heat index: "));
  Serial.print(hic);
  Serial.println(F("°C "));
  dht22Temperature = String(t);// + " °C";
  dht22Humidity = String(h);// + "%";
  dht22HeatIndex = String(hic);// + " °C";
  //Serial.print(hif);
  //Serial.println(F("°F"));
}

void setupML8511() {
  //Serial.println("ML8511 setup start.");
  pinMode(UVOUT, INPUT);
  //pinMode(REF_3V3, INPUT);
  Serial.println("ML8511 setup complete.");
}
void setupSIM800L() {

  //serialSIM800L = new SoftwareSerial(SIM800_RX_PIN, SIM800_TX_PIN);
  Serial.println("SIM800L setup start......");
  Serial1.begin(9600);
  sim800l = new SIM800L((Stream *)&Serial1, SIM800_RST_PIN, 200, 512);
  while (!sim800l->isReady()) {
    Serial.println(F("Problem to initialize AT command, retry in 1 sec"));
    delay(1000);
  }
  Serial.println(F("AT command successful."));

  // Wait for the GSM signal
  uint8_t signal = sim800l->getSignal();
  while (signal <= 0) {
    delay(1000);
    signal = sim800l->getSignal();
  }

  Serial.print(F("Signal OK (strenght: "));
  Serial.print(signal);
  Serial.println(F(")"));
  delay(1000);
  /*
    Serial.print("Registering to network..");
    // Wait for operator network registration (national or roaming network)
    NetworkRegistration network = sim800l->getRegistrationStatus();
    while (network != REGISTERED_HOME && network != REGISTERED_ROAMING) {
      delay(1000);
      Serial.print(".");
      network = sim800l->getRegistrationStatus();
    }
    Serial.println(F("Network registration OK"));
    delay(1000);
  */
  sim800lSleepMode();
  Serial.println("SIM800L setup complete.");

}
void prepareSim800LSMS() {
  String msg = "LAT=" + gyneo6MV2Latitude + "&";
  msg += "LONG=" + gyneo6MV2Longitude + "&";
  msg += "ALT=" + gyneo6MV2Altitude + "&";
  msg += "BTR=" + batteryLevel + "V";
  sendSIM800LSMS(sim800lSMSPhoneNo, msg);
}
void loopMPU9250() {

  /*
    mpu9250AccelerationX= "",
       mpu9250AccelerationY= "",
       mpu9250AccelerationZ= "",
       mpu9250GyroX= "",
       mpu9250GyroY= "",
       mpu9250GyroZ= "",
       mpu9250Temp="";
  */

  xyzFloat gValue = myMPU6500.getGValues();
  xyzFloat accCorrRaw = myMPU6500.getCorrectedAccRawValues();
  xyzFloat angle = myMPU6500.getAngles();

  mpu9250AccelerationX = String(accCorrRaw.x);
  mpu9250AccelerationY = String(accCorrRaw.y);
  mpu9250AccelerationZ = String(accCorrRaw.z);


  mpu9250GX = String(gValue.x);
  mpu9250GY = String(gValue.y);
  mpu9250GZ = String(gValue.z);
  mpu9250ResultantG = String(myMPU6500.getResultantG(gValue));

  mpu9250GyroX = String(angle.x);
  mpu9250GyroY = String(angle.y);
  mpu9250GyroZ = String(angle.z);

  mpu9250Temp = String(myMPU6500.getTemperature());
  Serial.print("AccX : ");
  Serial.print(mpu9250GX);
  Serial.print("\tAccY : ");
  Serial.print(mpu9250GY);
  Serial.print("\tAccZ : ");
  Serial.print(mpu9250GZ);
  Serial.print("\tGyroX : ");
  Serial.print(mpu9250GyroX);
  Serial.print("\tGyroY : ");
  Serial.print(mpu9250GyroY);
  Serial.print("\tGyroZ : ");
  Serial.print(mpu9250GyroZ);
  Serial.print("\tTemp : ");
  Serial.println(mpu9250Temp);


}
void loopML8511() {
  //analogReference(3.3);
  int uvLevel = averageAnalogRead(UVOUT, 8);
  int refLevel = averageAnalogRead(REF_3V3, 8);


  //float refVoltage = refLevel * (5.0 /1023);

  //Use the 3.3V power pin as a reference to get a very accurate output value from sensor
  float outputVoltage = 3.3 / refLevel * uvLevel;
  //float outputVoltage = uvLevel * (3.10 /1023);
  float uvIntensity = mapfloat(outputVoltage  , 0.99, 2.8, 0.0, 15.0); //Convert the voltage to a UV intensity level

  /*analogReference(3.3);
    int refLevel = analogRead(REF_3V3); //averageAnalogRead(REF_3V3);
    float refVoltage = float(refLevel) * (3.3 / 1023.0);
    Serial.print("ref level : ");
    Serial.println(refLevel);

    Serial.print("ref volt : ");
    Serial.println(refVoltage);

    analogReference(3.3);
    int uvLevel = averageAnalogRead(UVOUT);
    Serial.print("uv level : ");
    Serial.println(uvLevel);
    float op = float(uvLevel) * (3.3/ 1023.0);
    Serial.print("uv voltage : ");
    Serial.println(op);
    float uvIntensity = mapfloat(op ,0.99, 2.8,  0.0, 15.0); //Convert the voltage to a UV intensity level

  */
  /*

    float refLevel =float(averageAnalogRead(REF_3V3)) * (5.0 /1023);
    float uvLevel =float(averageAnalogRead(UVOUT)) / 1023.0 * refLevel;
    // float(averageAnalogRead(UVOUT)) * (5.0 / 1024.0);
      Serial.print("ML8511 ref voltage : ");
      Serial.println(refLevel);

    Serial.print("ML8511 output voltage : ");
    Serial.println(uvLevel );
    float uvIntensity = mapfloat(uvLevel ,0.99, 2.8,  0.0, 15.0); //Convert the voltage to a UV intensity level
  */



  /*
    Serial.print("refLevel: ");
    Serial.print(refLevel);

    Serial.print("  uvLevel: ");
    Serial.print(uvLevel);

    Serial.print(" / ML8511 voltage: ");
    Serial.print(outputVoltage);
  */
  /* ml8511UvRadiation = "";
    ml8511UvRadiation += "refLevel-";
    ml8511UvRadiation += String(refLevel);
    ml8511UvRadiation +=  "-uvLevel-";
    ml8511UvRadiation +=  String(uvLevel);
    ml8511UvRadiation += "-opVolat-";
    ml8511UvRadiation += String(outputVoltage);
    ml8511UvRadiation += "-uvI-";

    ml8511UvRadiation += String(uvIntensity);
  */
  Serial.print("UV output voltate : ");
  Serial.println(outputVoltage);
  ml8511UvRadiation = String(uvIntensity);// + "UV-VOLT=" + String(outputVoltage); // + " (mW / cm ^ 2)";
  Serial.print("UV Intensity (mW / cm ^ 2): ");
  Serial.println(ml8511UvRadiation);

}
void loopBMP280() {
  bmp280Temperature = String(bmp.readTemperature());// + " °C";
  bmp280Pressure = String(bmp.readPressure());// + "Pa";
  bmp280Altitude = String(bmp.readAltitude(1009));// + " m";
  Serial.print(F("Temperature = "));
  Serial.print(bmp280Temperature);


  Serial.print(F("  Pressure = "));
  Serial.print(bmp280Pressure);
  Serial.print(" Pa");

  Serial.print(F("  Approx altitude = "));
  Serial.print(bmp280Altitude); /* Adjusted to local forecast! */
  //The "1019.66" is the pressure(hPa) at sea level in day in your region
  //If you don't know it, modify it until you get your current altitude
  Serial.println(" m");

}
void loopGYNEO6MV2() {

  Serial.print("Latitude : ");
  gyneo6MV2Latitude = printFloat(gps.location.lat(), gps.location.isValid(), 11, 6);
  Serial.print(gyneo6MV2Latitude);
  Serial.print("  Longitude : ");
  gyneo6MV2Longitude = printFloat(gps.location.lng(), gps.location.isValid(), 12, 6);
  Serial.print(gyneo6MV2Longitude);
  //printInt(gps.location.age(), gps.location.isValid(), 5);
  Serial.print("  Date Time : ");
  printDateTime(gps.date, gps.time);
  Serial.print("  Altitude : ");
  gyneo6MV2Altitude = printFloat(gps.altitude.meters(), gps.altitude.isValid(), 7, 2);
  Serial.println(gyneo6MV2Altitude);

  //printFloat(gps.course.deg(), gps.course.isValid(), 7, 2);
  //printFloat(gps.speed.kmph(), gps.speed.isValid(), 6, 2);

  smartDelay(1000);

  if (millis() > 5000 && gps.charsProcessed() < 10) {
    Serial.println(F("No GPS data received: check wiring"));
  }
}
void loopTCS34725()
{
  rgb = TCS34725_Get_RGBData();
  RGB888 = TCS34725_GetRGB888(rgb);
  RGB565 = TCS34725_GetRGB565(rgb);
  Serial.print("RGB888 : R = ");
  Serial.print(RGB888.R);
  Serial.print(" G = ");
  Serial.print(RGB888.G);
  Serial.print(" B = ");
  Serial.println(RGB888.B);
  tcs34725Color = String(RGB888.R) + "_" + String(RGB888.G) + "_" + String(RGB888.B);
  //Serial.print("\r\n");
  //Serial.print("RGB565 = 0x");
  //Serial.println((RGB565), HEX);
  /*if (TCS34725_GetLux_Interrupt(0xff00, 0x00ff) == 1) {
    Serial.println("Lux_Interrupt = 1\r\n");
    } else {
    Serial.println("Lux_Interrupt = 0\r\n");
    }*/
}
void loopHW837() {
  float sensorVoltage;
  float sensorValue;
  int UV_index;
  String quality = "";
  //analogReference(5.0);
  sensorValue = averageAnalogRead(UV_INDEX_PIN, 8);

  sensorVoltage = sensorValue * (5.0 / 1023);
  Serial.print("uv sensor voltage: ");
  Serial.println(sensorVoltage);
  UV_index = sensorVoltage / 0.1;
  hw837UvIndex = String(UV_index);

  //condition for UV state
  if (UV_index <= 2) {
    quality = "   LOW ";
  }

  else if (UV_index > 2 && UV_index <= 5) {
    quality = "   MOD ";
  }

  else if (UV_index > 5 && UV_index <= 7) {
    quality = "   HIGH ";
  }

  else if (UV_index > 7 && UV_index <= 10) {
    quality = "VERY HIGH";

  }

  else {
    quality = " EXTREME ";
  }
  Serial.print("UV value : ");
  Serial.print(UV_index);
  Serial.print("  UV quality : ");
  Serial.println(quality);
}
void loopESP32CAM() {
  int cMillis = millis();

  int diff = cMillis - esp32LastDataSentTime;
  if (diff > esp32DataSendInterval) {
    Serial.println("[Arduino] : Send SEND_DATA_TO_ESP32 to ESP32 - CAM.");
    String msg = "UR=" + ml8511UvRadiation + "&";
    msg += "UI=" + hw837UvIndex + "&";
    msg += "TEMP=" + dht22Temperature + "&";
    msg += "HU=" + dht22Humidity + "&";
    msg += "HI=" + dht22HeatIndex + "&";
    msg += "COLOR=" + tcs34725Color + "&";
    msg += "BMPTEMP=" + bmp280Temperature + "&";
    msg += "BMPPRE=" + bmp280Pressure + "&";
    msg += "BMPALT=" + bmp280Altitude + "&";
    msg += "LAT=" + gyneo6MV2Latitude + "&";
    msg += "LONG=" + gyneo6MV2Longitude + "&";
    msg += "ALT=" + gyneo6MV2Altitude + "&";

    //msg += "AX=" + mpu9250AccelerationX + "&";
    //msg += "AY=" + mpu9250AccelerationY + "&";
    //msg += "AZ=" + mpu9250AccelerationZ + "&";
    msg += "AX=" + mpu9250GX + "&";
    msg += "AY=" + mpu9250GY + "&";
    msg += "AZ=" + mpu9250GZ + "&";
    msg += "G=" + mpu9250ResultantG + "&";
    msg += "GX=" + mpu9250GyroX + "&";
    msg += "GY=" + mpu9250GyroY + "&";
    msg += "GZ=" + mpu9250GyroZ + "&";
    msg += "MPUTEMP=" + mpu9250Temp + "&";
    msg += "BT=" + batteryLevel + "V";
    String esp32Data = "CMD:DATA:" + String(esp32MessageId) + ":" + msg;
    esp32Serial.write(esp32Data.c_str());
    //String esp32Data = String(esp32MessageId) + ":" + msg;
    esp32LastDataSentTime = cMillis;
    esp32MessageId++;
  } else {
    diff = cMillis - esp32LastCamCapturedTime ;
    if (diff > esp32CamCaptureInterval) {
      Serial.println("[Arduino] : Send CMD: CAPTURE_CAMERA to ESP32");
      esp32Serial.write("CMD:CAPTURE_CAMERA");
      esp32LastCamCapturedTime = cMillis;
    }
  }

  String esp32Response = "";
  esp32Response = esp32Serial.readString();
  if (esp32Response.length() > 0) {
    Serial.print("[Arduino] : ESP32 message received : ");
    Serial.println(esp32Response);
  }
}
int averageAnalogRead(int pinToRead, byte numberOfReadings)
{

  unsigned int runningValue = 0;

  for (int x = 0 ; x < numberOfReadings ; x++)
  {
    runningValue += analogRead(pinToRead);
  }
  runningValue /= numberOfReadings;

  return (runningValue);
}

float mapfloat(float x, float in_min, float in_max, float out_min, float out_max)
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

static String printFloat(float val, bool valid, int len, int prec)
{
  String result = "";
  if (!valid)
  {
    while (len-- > 1) {
      Serial.print('*');
      result += '*';
    }
    Serial.print(' ');
  }
  else
  {
    Serial.print(val, prec);
    result = String(val, prec);
    int vi = abs((int)val);
    int flen = prec + (val < 0.0 ? 2 : 1); // . and -
    flen += vi >= 1000 ? 4 : vi >= 100 ? 3 : vi >= 10 ? 2 : 1;
    for (int i = flen; i < len; ++i)
      Serial.print(' ');

  }

  smartDelay(0);
  return result;
}

static void printInt(unsigned long val, bool valid, int len)
{
  char sz[32] = " * * * * * * * * * * * * * * * * * ";
  if (valid)
    sprintf(sz, " % ld", val);
  sz[len] = 0;
  for (int i = strlen(sz); i < len; ++i)
    sz[i] = ' ';
  if (len > 0)
    sz[len - 1] = ' ';
  Serial.print(sz);
  smartDelay(0);
}

static void printDateTime(TinyGPSDate &d, TinyGPSTime &t)
{
  if (!d.isValid())
  {
    Serial.print(F(" * * * * * * * * * * "));
  }
  else
  {
    char sz[32];
    sprintf(sz, " % 02d / % 02d / % 02d ", d.month(), d.day(), d.year());
    Serial.print(sz);
  }

  if (!t.isValid())
  {
    Serial.print(F(" * * * * * * * * "));
  }
  else
  {
    char sz[32];
    sprintf(sz, " % 02d: % 02d: % 02d ", t.hour(), t.minute(), t.second());
    Serial.print(sz);
  }

  printInt(d.age(), d.isValid(), 5);
  smartDelay(0);
}
static void smartDelay(unsigned long ms)
{
  unsigned long start = millis();
  do
  {
    while (gpsSoftwareSerial.available())
      gps.encode(gpsSoftwareSerial.read());
  } while (millis() - start < ms);
}
void loopLoRa() {
  int cMillis = millis();
  int diff = cMillis - loRalastSendTime ;
  if (diff > loRaSendInterval) {
    Serial.println("Send start -------");
    loRaSendMessage();
    loRalastSendTime = cMillis;            // timestamp the message
    Serial.println("Send complete-------");

  }
}
void loRaSendMessage() {
  String preMsg =  "[MEGA]:";
  String msg =  ":" + String(loRaLastSendMessageId) + ":";
  /*
    ml8511UvRadiation = "",
       dht22Temperature = "",
       dht22Humidity = "",
       dht22HeatIndex = "",
       tcs34725Color="",
       bmp280Temperature = "",
       bmp280Pressure = "",
       bmp280Altitude = "",
       gyneo6MV2Latitude = "",
       gyneo6MV2Longitude = "",
       gyneo6MV2Altitude = "",
       hw837UvIndex ="";
  */
  msg += "UR=" + ml8511UvRadiation + "&";
  msg += "UI=" + hw837UvIndex + "&";
  msg += "TEMP=" + dht22Temperature + "&";
  msg += "HU=" + dht22Humidity + "&";
  msg += "HI=" + dht22HeatIndex + "&";
  msg += "COLOR=" + tcs34725Color + "&";
  msg += "BMPTEMP=" + bmp280Temperature + "&";
  msg += "BMPPRE=" + bmp280Pressure + "&";
  msg += "BMPALT=" + bmp280Altitude + "&";
  msg += "LAT=" + gyneo6MV2Latitude + "&";
  msg += "LONG=" + gyneo6MV2Longitude + "&";
  msg += "ALT=" + gyneo6MV2Altitude + "&";
  //msg += "AX=" + mpu9250AccelerationX + "&";
  //msg += "AY=" + mpu9250AccelerationY + "&";
  //msg += "AZ=" + mpu9250AccelerationZ + "&";
  msg += "AX=" + mpu9250GX + "&";
  msg += "AY=" + mpu9250GY + "&";
  msg += "AZ=" + mpu9250GZ + "&";
  msg += "G=" + mpu9250ResultantG + "&";
  msg += "GX=" + mpu9250GyroX + "&";
  msg += "GY=" + mpu9250GyroY + "&";
  msg += "GZ=" + mpu9250GyroZ + "&";
  msg += "MPUTEMP=" + mpu9250Temp + "&";
  msg += "BT=" + batteryLevel + "V";
  int mLength = preMsg.length() + msg.length() ;
  mLength += String(mLength).length() ;
  msg = preMsg + String(mLength) + msg;
  char msgBytes[msg.length() + 1];
  msg.toCharArray(msgBytes, msg.length() + 1);
  Serial.println("Sending : " + msg);
  LoRa.beginPacket();                   // start packet
  //LoRa.write(loRaDestination);              // add destination address
  //LoRa.write(loRaLocalAddress);             // add sender address
  //LoRa.write(loRaLastSendMessageId);                 // add message ID
  //LoRa.write(msg.length() + 1);      // add payload length
  LoRa.write(msgBytes, msg.length() + 1);            // add payload
  LoRa.endPacket();                     // finish packet and send it
  loRaLastSendMessageId++;                           // increment message ID
  msg = "";
}

void sim800lSleepMode() {
  Serial.println("entering sleep mode");
  Serial1.print("AT+CSCLK=2\r");
}
void sim800lWakeup() {
  Serial.println("sim800l wakeup start");
  Serial1.print("AT\r");
  delay(4900);
  Serial1.print("AT+CSCLK=0\r");


  uint8_t signal = sim800l->getSignal();
  while (signal <= 0) {
    delay(1000);
    signal = sim800l->getSignal();
  }

  Serial.print(F("Signal OK (strenght: "));
  Serial.print(signal);
  Serial.println(F(")"));
  delay(200);
  Serial.println("sim800l wakeup complete");
}
void sendSIM800LSMS(String &mobileNoString, String &message)
{
  sim800lWakeup();
  Serial.println("Sending SMS...");               //Show this message on serial monitor
  Serial1.print("AT+CMGF=1\r");                   //Set the module to SMS mode
  delay(1000);
  String smsCmd = "AT+CMGS=\"+91" + mobileNoString + "\"\r";
  Serial1.print(smsCmd.c_str());  //Your phone number don't forget to include your country code, example +212123456789"
  delay(1000);
  Serial1.print(message.c_str());       //This is the text to send to the phone number, don't make it too long or you have to modify the SoftwareSerial buffer
  delay(1000);
  Serial1.print((char)26);// (required according to the datasheet)
  delay(1000);
  Serial1.println();
  Serial.println("SMS Sent.");
  delay(1000);
  sim800lSleepMode();
}
int getSIM800LNetwork()
{
  String buff;
  //buff = "+CSQ: 16,0";
  unsigned int result, index1, index2, timeout = 0;

  Serial1.println("AT+CSQ");
  for (unsigned long start = millis(); millis() - start < 2000;) {
    while (Serial1.available())
    {
      buff = Serial1.readString();
      timeout = 1;
      break;
    }
  }

  if (timeout == 0)
  {
    return 0;
  }

  Serial.println(buff);

  //String network_status;
  //_____________________________________________________
  //Remove sent "AT Command" from the response string.
  index1 = buff.indexOf("\r");
  buff.remove(0, index1 + 2);
  buff.trim();
  //_____________________________________________________

  //_____________________________________________________

  index1 = buff.indexOf(":");
  index2 = buff.indexOf(",");
  buff = buff.substring(index1 + 1, index2);
  buff.trim();
  result = buff.toInt();

  if (result == 99)
  {
    //not known or not detectable
    return 0;
  }
  else if (result >= 2 && result <= 9)
  {
    //Signal Quality = Marginal
    return 20;
  }
  else if (result >= 10 && result <= 14)
  {
    //Signal Quality = OK
    return 40;
  }
  else if (result >= 15 && result <= 19)
  {
    //Signal Quality = Good
    return 60;
  }
  else if (result >= 20 && result <= 31)
  {
    //Signal Quality = Excellent
    return 99;
  }

  return 0;
}